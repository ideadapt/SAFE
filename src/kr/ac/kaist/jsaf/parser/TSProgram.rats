/*******************************************************************************
    Copyright (c) 2013-2014, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A.5 Interfaces
 * A.9 Programs and External Modules
 * A.10 Ambients
 * Definition of TypeScript source files and external modules
 *
 * Support DeclarationSourceFile only.
 * Will support ImplementationSourceFile later when needed.
 */
module kr.ac.kaist.jsaf.parser.TSProgram(Expression, Literal, Type, Symbol,
                                         Identifier, Keyword, Spacing);

import Expression;
import Literal;
import Type;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * SourceFile ::=
 *   ImplementationSourceFile
 * | DeclarationSourceFile
 * ImplementationSourceFile ::=
 *   ImplementationElements?
 * ImplementationElements ::=
 *   ImplementationElement
 * | ImplementationElements w ImplementationElement
 * ImplementationElement ::=
 *   ModuleElement
 * | ExportAssignment
 * | (export w)? ExternalImportDeclaration
 * | (export w)? AmbientDeclaration
 * DeclarationSourceFile ::=
 *   DeclarationElements?
 */
public Program SourceFile =
     initParser w a1:DeclarationElements? closeParser
     { if (a1 == null) a1 = Collections.<SourceElement>emptyList();
       HashMap<String, Span> map = new HashMap<String, Span>();
       yyValue = NodeFactory.makeProgram(createSpan(yyStart,yyCount), a1, false);
     };

void initParser = w { initParser(); };
void closeParser = w EndOfFile
     { try {
           writer.close();
           fw.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

/*
 * DeclarationElements ::=
 *   DeclarationElement
 * | DeclarationElements w DeclarationElement
 */
List<SourceElement> DeclarationElements =
     a1:DeclarationElement a2s:(w DeclarationElement)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * DeclarationElement ::=
 *   ExportAssignment
 * | (export w)? InterfaceDeclaration
 * | (export w)? ImportDeclaration
 * | (export w)? ExternalImportDeclaration
 * | (export w)? AmbientDeclaration
 */
SourceElement DeclarationElement =
     ExportAssignment
   / (export w)? InterfaceDeclaration
   / (export w)? ImportDeclaration
   / (export w)? ExternalImportDeclaration
   / (export w)? AmbientDeclaration
   ;

/*
 * ExternalImportDeclaration ::= import w Identifier w = w ExternalModuleReference w ;
 */
private transient ExtImpDecl ExternalImportDeclaration =
     import w a1:Id w equals w a2:ExternalModuleReference w semicolon
     { yyValue = TSFactory.makeExtImpDecl(createSpan(yyStart,yyCount), a1, a2); };

/*
 * ExternalModuleReference ::= require w ( w StringLiteral w )
 */
private transient String ExternalModuleReference =
     require w openparen w a1:StringLiteral w closeparen
     { yyValue = a1.getEscaped(); };

/*
 * Original syntax:
 * ExportAssignment ::= export w = w Identifier w ;
 *
 * Relaxed to accept sloppy declarations:
 * ExportAssignment ::= export w = w Identifier (w ;)?
 */
private transient ModExpAssignment ExportAssignment =
     export w equals w a1:Id (w semicolon)?
     { yyValue = TSFactory.makeModExpAssignment(createSpan(yyStart,yyCount), a1); };

/*
 * ImportDeclaration ::= import w Identifier w = w EntityName w ;
 */
private transient TSImpDecl ImportDeclaration =
     import w a1:Id w equals w a2:EntityName w semicolon
     { yyValue = TSFactory.makeTSImpDecl(createSpan(yyStart,yyCount), a1, a2); };

/*
 * EntityName ::=
 *   Identifier
 * | ModuleName . Identifier
 */
private transient Path EntityName =
     a1:Id a2s:(void:dot Id)*
     { yyValue = NodeFactory.makePath(createSpan(yyStart,yyCount),
                                      Useful.list(a1, a2s.list()));
     };

/*
 * InterfaceDeclaration ::=
 *   interface w Identifier (w TypeParameters)? (w InterfaceExtends)? w ObjectType
 */
private transient IntfDecl InterfaceDeclaration =
     interface w a1:Id a2:(w TypeParams)? a3:(w InterfaceExtends)? w a4:ObjectType
     { List<TypeParam> tps;
       if (a2 == null) tps = TSFactory.emptyTparams();
       else tps = a2;
       List<TypeRef> ext;
       if (a3 == null) ext = Collections.<TypeRef>emptyList();
       else ext = a3;
       yyValue = TSFactory.makeIntfDecl(createSpan(yyStart,yyCount),
                                        a1, tps, ext, a4);
     };

/*
 * InterfaceExtends ::= extends w ClassOrInterfaceTypeList
 */
transient List<TypeRef> InterfaceExtends =
     extends w yyValue:ClassOrInterfaceTypeList ;

/*
 * ClassOrInterfaceTypeList ::=
 *   ClassOrInterfaceType
 * | ClassOrInterfaceTypeList w , w ClassOrInterfaceType
 */
transient List<TypeRef> ClassOrInterfaceTypeList =
     a1:ClassOrInterfaceType a2s:(w void:comma w ClassOrInterfaceType)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * ClassOrInterfaceType ::= TypeReference
 */
transient TypeRef ClassOrInterfaceType = TypeRef ;

/*
 * AmbientDeclaration ::=
 *   declare w AmbientVariableDeclaration
 * | declare w AmbientFunctionDeclaration
 * | declare w AmbientClassDeclaration
 * | declare w AmbientEnumDeclaration
 * | declare w AmbientModuleDeclaration
 * | declare w AmbientExternalModuleDeclaration
 */
transient AmbDecl AmbientDeclaration =
     declare w yyValue:AmbientVariableDeclaration
   / declare w yyValue:AmbientFunctionDeclaration
   / declare w yyValue:AmbientClassDeclaration
   / declare w yyValue:AmbientEnumDeclaration
   / declare w yyValue:AmbientModuleDeclaration
   / declare w yyValue:AmbientExternalModuleDeclaration
   ;

/*
 * AmbientVariableDeclaration ::= var w Identifier (w TypeAnnotation)? w ;
 *
 * NOTE: The spec requires the semicolon at the end of AmbientVariableDeclaration
 *       but programmers often omit it.
 */
transient AmbVarDecl AmbientVariableDeclaration =
     var w a1:Id a2:(w TypeAnnot)? (w semicolon)?
     { Option<Type> typ;
       if (a2 == null) typ = Option.<Type>none();
       else typ = Option.<Type>some(a2);
       yyValue = TSFactory.makeAmbVarDecl(createSpan(yyStart,yyCount), a1, typ);
     };

/*
 * AmbientFunctionDeclaration ::= function w Identifier w CallSignature w ;
 *
 * NOTE: The spec requires the semicolon at the end of AmbientFunctionDeclaration
 *       but programmers often omit it.
 */
transient AmbFunDecl AmbientFunctionDeclaration =
     function w a1:Id w a2:CallSig (w semicolon)?
     { yyValue = TSFactory.makeAmbFunDecl(createSpan(yyStart,yyCount), a1, a2); };

/*
 * AmbientClassDeclaration ::=
 *   class w Identifier (w TypeParameters)? w ClassHeritage w { w AmbientClassBody w }
 * AmbientClassBody ::= AmbientClassBodyElements?
 */
transient AmbClsDecl AmbientClassDeclaration =
     class w a1:Id a2:(w TypeParams)? w a3:ClassHeritage w opencurly
     a4:(w AmbientClassBodyElements)? w closecurly
     { List<TypeParam> tps;
       if (a2 == null) tps = TSFactory.emptyTparams();
       else tps = a2;
       List<AmbClsElt> elts;
       if (a4 == null) elts = Collections.<AmbClsElt>emptyList();
       else elts = a4;
       yyValue = TSFactory.makeAmbClsDecl(createSpan(yyStart,yyCount),
                                          a1, tps, a3.getA(), a3.getB(), elts);
     };

/*
 * ClassHeritage ::= ClassExtendsClause? (w ImplementsClause)?
 */
private transient kr.ac.kaist.jsaf.useful.Pair<Option<TypeRef>, List<TypeRef>> ClassHeritage =
     a1:ClassExtendsClause? a2:(w ImplementsClause)?
     { Option<TypeRef> ext;
       if (a1 == null) ext = Option.<TypeRef>none();
       else ext = Option.<TypeRef>some(a1);
       List<TypeRef> imp;
       if (a2 == null) imp = Collections.<TypeRef>emptyList();
       else imp = a2;
       yyValue = new kr.ac.kaist.jsaf.useful.Pair<Option<TypeRef>, List<TypeRef>>(ext, imp);
     };

/*
 * ClassExtendsClause ::= extends w ClassType
 */
private transient TypeRef ClassExtendsClause = extends w yyValue:ClassType ;

/*
 * ClassType ::= TypeReference
 */
private transient TypeRef ClassType = TypeRef ;

/*
 * ImplementsClause ::= implements w ClassOrInterfaceTypeList
 */
private transient List<TypeRef> ImplementsClause =
     implements w yyValue:ClassOrInterfaceTypeList ;

/*
 * AmbientClassBodyElements ::=
 *   AmbientClassBodyElement
 * | AmbientClassBodyElements w AmbientClassBodyElement
 */
transient List<AmbClsElt> AmbientClassBodyElements =
     a1:AmbientClassBodyElement a2s:(w AmbientClassBodyElement)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * Original syntax:
 * AmbientClassBodyElement ::=
 *   AmbientConstructorDeclaration
 * | AmbientPropertyMemberDeclaration
 * | IndexSignature
 *
 * Relaxed to accept sloppy declarations:
 * AmbientClassBodyElement ::=
 *   AmbientConstructorDeclaration
 * | AmbientPropertyMemberDeclaration
 * | IndexSignature (w ;)?
 */
transient AmbClsElt AmbientClassBodyElement =
     AmbientConstructorDeclaration
   / AmbientPropertyMemberDeclaration
   / a1:IndexSig (w semicolon)?
     { yyValue = TSFactory.makeAmbIndDecl(createSpan(yyStart,yyCount), a1); }
   ;

/*
 * AmbientConstructorDeclaration ::=
 *   constructor w ( (w ParameterList)? w ) w ;
 */
transient AmbCnstDecl AmbientConstructorDeclaration =
     constructor w openparen a1:(w ParamList)? w closeparen w semicolon
     { List<Param> ps;
       if (a1 == null) ps = TSFactory.emptyParams();
       else ps = a1;
       yyValue = TSFactory.makeAmbCnstDecl(createSpan(yyStart,yyCount), ps);
     };

/*
 * AmbientPropertyMemberDeclaration ::=
 *   (PublicOrPrivate w)? (static w)? PropertyName (w TypeAnnotation)? w ;
 * | (PublicOrPrivate w)? (static w)? PropertyName w CallSignature w ;
 *
 * NOTE: The spec requires the semicolon at the end of AmbientPropertyMemberDeclaration
 *       but programmers often omit it.
 */
transient AmbMemDecl AmbientPropertyMemberDeclaration =
     a1:(PublicOrPrivate w)? static w a2:CallSig (w semicolon)?
     { List<Modifier> mods;
       if (a1 == null) mods = Collections.<Modifier>emptyList();
       else {
         mods = new ArrayList<Modifier>();
         if (a1 != null) mods.add(a1);
       }
       Span span = createSpan(yyStart, yyCount);
       yyValue = TSFactory.makeAmbMemDecl(span, mods,
                                          NodeFactory.makePropId(span, NodeFactory.makeId(span, "static")),
                                          Option.<Type>some(a2));
     }
   / a1:(PublicOrPrivate w)? static w a2:(w TypeAnnot)? (w semicolon)?
     { List<Modifier> mods;
       if (a1 == null) mods = Collections.<Modifier>emptyList();
       else {
         mods = new ArrayList<Modifier>();
         if (a1 != null) mods.add(a1);
       }
       Option<Type> ty;
       if (a2 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a2);
       Span span = createSpan(yyStart, yyCount);
       yyValue = TSFactory.makeAmbMemDecl(span, mods,
                                          NodeFactory.makePropId(span, NodeFactory.makeId(span, "static")),
                                          ty);
     }
   / a1:(PublicOrPrivate w)? a2:(static w)? a3:PropName w a4:CallSig (w semicolon)?
     { List<Modifier> mods;
       if (a1 == null && a2 == null) mods = Collections.<Modifier>emptyList();
       else {
         mods = new ArrayList<Modifier>();
         if (a1 != null) mods.add(a1);
         if (a2 != null) mods.add(TSFactory.makeStatic());
       }
       yyValue = TSFactory.makeAmbMemDecl(createSpan(yyStart, yyCount), mods, a3,
                                          Option.<Type>some(a4));
     }
   / a1:(PublicOrPrivate w)? a2:(static w)? a3:PropName a4:(w TypeAnnot)? (w semicolon)?
     { List<Modifier> mods;
       if (a1 == null && a2 == null) mods = Collections.<Modifier>emptyList();
       else {
         mods = new ArrayList<Modifier>();
         if (a1 != null) mods.add(a1);
         if (a2 != null) mods.add(TSFactory.makeStatic());
       }
       Option<Type> ty;
       if (a4 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a4);
       yyValue = TSFactory.makeAmbMemDecl(createSpan(yyStart, yyCount), mods, a3, ty);
     };

/*
 * AmbientEnumDeclaration ::= enum w Identifier w { (w AmbientEnumBody)? w }
 */
private transient AmbEnumDecl AmbientEnumDeclaration =
     enum w a1:Id w opencurly a2:(w AmbientEnumBody)? w closecurly
     { List<AmbEnumMem> mem;
       if (a2 == null) mem = Collections.<AmbEnumMem>emptyList();
       else mem = a2;
       yyValue = TSFactory.makeAmbEnumDecl(createSpan(yyStart,yyCount), a1, mem);
     };

/*
 * AmbientEnumBody ::= AmbientEnumMemberList (w ,)?
 * AmbientEnumMemberList ::=
 *   AmbientEnumMember
 * | AmbientEnumMemberList w , w AmbientEnumMember
 */
private transient List<AmbEnumMem> AmbientEnumBody =
     a1:AmbientEnumMember a2s:(w void:comma w AmbientEnumMember)* (w comma)?
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * AmbientEnumMember ::=
 *   PropertyName
 * | Propertyname w = w IntegerLiteral
 */
private transient AmbEnumMem AmbientEnumMember =
     a1:PropName a2:(w void:equals w IntegerLiteral)?
     { Option<NumberLiteral> num;
       if (a2 == null) num = Option.<NumberLiteral>none();
       else num = Option.<NumberLiteral>some(a2);
       yyValue = TSFactory.makeAmbEnumMem(createSpan(yyStart,yyCount), a1, num);
     };

/*
 * IntegerLiteral ::=
 *   SignedInteger
 * | HexIntegerLiteral
 */
private transient NumberLiteral IntegerLiteral =
     SignedInteger
   / HexIntegerLiteral
   ;

/*
 * SignedInteger ::=
 *   DecimalDigits
 * | + DecimalDigits
 * | - DecimalDigits
 */
private transient NumberLiteral SignedInteger =
     a1:('+' / '-')? a2:DecimalDigits
     { String num;
       if (a1 == null) num = a2;
       else            num = a1+a2;
       yyValue = NodeFactory.makeNumericLiteral(writer, createSpan(yyStart,yyCount),
                                                num, "", "", "");
     };

/*
 * AmbientModuleDeclaration ::=
 *   module w IdentifierPath w { w AmbientModuleBody w }
 * AmbientModuleBody ::= AmbientModuleElements?
 */
private transient AmbModDecl AmbientModuleDeclaration =
     module w a1:IdentifierPath w opencurly a2:(w AmbientModuleElements)? w closecurly
     { List<AmbModElt> mem;
       if (a2 == null) mem = Collections.<AmbModElt>emptyList();
       else mem = a2;
       yyValue = TSFactory.makeAmbModDecl(createSpan(yyStart,yyCount), a1, mem);
     };

/*
 * IdentifierPath ::=
 *   Identifier
 * | IdentifierPath dot Identifier
 */
private transient Path IdentifierPath =
     a1:Id a2s:(void:dot Id)*
     { yyValue = NodeFactory.makePath(createSpan(yyStart,yyCount),
                                      Useful.list(a1, a2s.list()));
     };

/*
 * AmbientModuleElements ::=
 *   AmbientModuleElement
 * | AmbientModuleElements w AmbientModuleElement
 */
private transient List<AmbModElt> AmbientModuleElements =
     a1:AmbientModuleElement a2s:(w AmbientModuleElement)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * AmbientModuleElement ::=
 *   (export w)? AmbientVariableDeclaration
 * | (export w)? AmbientFunctionDeclaration
 * | (export w)? AmbientClassDeclaration
 * | (export w)? InterfaceDeclaration
 * | (export w)? AmbientEnumDeclaration
 * | (export w)? AmbientModuleDeclaration
 * | (export w)? ImportDeclaration
 */
private transient AmbModElt AmbientModuleElement =
     (export w)? a1:AmbientVariableDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:AmbientFunctionDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:AmbientClassDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:InterfaceDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:AmbientEnumDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:AmbientModuleDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:ImportDeclaration
     { yyValue = TSFactory.makeAmbModElt(createSpan(yyStart,yyCount), a1); }
   ;

/*
 * AmbientExternalModuleDeclaration ::=
 *   module w StringLiteral w { w AmbientExternalModuleBody w }
 * AmbientExternalModuleBody ::= AmbientExternalModuleElements?
 */
private transient AmbExtModDecl AmbientExternalModuleDeclaration =
     module w a1:StringLiteral w opencurly a2:(w AmbientExternalModuleElements)? w closecurly
     { List<AmbExtModElt> mem;
       if (a2 == null) mem = Collections.<AmbExtModElt>emptyList();
       else mem = a2;
       yyValue = TSFactory.makeAmbExtModDecl(createSpan(yyStart,yyCount), a1.getEscaped(), mem);
     };

/*
 * AmbientExternalModuleElements ::=
 *   AmbientExternalModuleElement
 * | AmbientExternalModuleElements w AmbientExternalModuleElement
 */
private transient List<AmbExtModElt> AmbientExternalModuleElements =
     a1:AmbientExternalModuleElement a2s:(w AmbientExternalModuleElement)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * AmbientExternalModuleElement ::=
 *   AmbientModuleElement
 * | ExportAssignment
 * | (export w)? ExternalImportDeclaration
 */
private transient AmbExtModElt AmbientExternalModuleElement =
     a1:AmbientModuleElement
     { yyValue = TSFactory.makeAmbExtModElt(createSpan(yyStart,yyCount), a1.getDecl()); }
   / a1:ExportAssignment
     { yyValue = TSFactory.makeAmbExtModElt(createSpan(yyStart,yyCount), a1); }
   / (export w)? a1:ExternalImportDeclaration
     { yyValue = TSFactory.makeAmbExtModElt(createSpan(yyStart,yyCount), a1); }
   ;
