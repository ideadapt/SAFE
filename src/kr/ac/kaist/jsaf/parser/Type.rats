/*******************************************************************************
    Copyright (c) 2013, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A.1 Types
 * Definition of TypeScript types
 */
module kr.ac.kaist.jsaf.parser.Type(Expression, Literal, Symbol, Identifier,
                                    Keyword, Spacing);

import Expression;
import Literal;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * TypeParameters ::= "<" w TypeParameterList w ">"
 */
transient List<TypeParam> TypeParams =
    openangle w yyValue:TypeParamList w closeangle;

/*
 * TypeParameterList ::=
 *   TypeParameter
 * | TypeParameterList w "," w TypeParameter
 */
transient List<TypeParam> TypeParamList =
     a1:TypeParam a2s:(w void:comma w TypeParam)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * TypeParameter ::= Identifier (w Constraint)?
 */
transient TypeParam TypeParam =
     a1:Id a2:(w Constraint)?
     { Option<Type> ext;
       if (a2 == null) ext = Option.<Type>none();
       else ext = Option.<Type>some(a2);
       yyValue = TSFactory.makeTypeParam(createSpan(yyStart,yyCount), a1, ext);
     };

/*
 * Constraint ::= "extends" w Type
 */
transient Type Constraint = extends w yyValue:Type;

/*
 * Type ::=
 *   PredefinedType
 * | TypeReference
 * | TypeQuery
 * | TypeLiteral
 * TypeLiteral ::=
 *   ObjectType
 * | ArrayType
 * | FunctionType
 * | ConstructorType
 */
transient Type Type =
     TypeQuery
   / ConstructorType
   / FunctionType
   / seed:TypeFront list:TypeTail*
     { yyValue = (Type)apply(list, seed); };

Type TypeFront =
     PredefType
   / ObjectType
   / TypeRef
   ;

constant transient Action<Type> TypeTail =
     ArrayType ;

/*
 * ArrayType ::=
 *   PredefinedType w "[" w "]"
 * | TypeReference w "[" w "]"
 * | ObjectType w "[" w "]"
 * | ArrayType w "[" w "]"
 */
constant inline Action<Type> ArrayType =
     w opensquare w closesquare
     { yyValue = new Action<Type>() {
             public Type run(Type base) {
                 return TSFactory.makeArrayType(createSpan(yyStart,yyCount+1),
                                                (Type)base);
             }};
     };

/*
 * PredefinedType ::=
 *   "any"
 * | "number"
 * | "boolean"
 * | "string"
 * | "void"
 */
transient PredefType PredefType =
     any     { yyValue = TSFactory.makeAnyT(createSpan(yyStart,yyCount)); }
   / number  { yyValue = TSFactory.makeNumberT(createSpan(yyStart,yyCount)); }
   / boolean { yyValue = TSFactory.makeBoolT(createSpan(yyStart,yyCount)); }
   / string  { yyValue = TSFactory.makeStringT(createSpan(yyStart,yyCount)); }
   / void   { yyValue = TSFactory.makeVoidT(createSpan(yyStart,yyCount)); }
   ;

/*
 * TypeReference ::= TypeName (w TypeArguments)?
 */
transient TypeRef TypeRef =
     a1:TypeName a2:(w TypeArgs)?
     { List<Type> args;
       if (a2 == null) args = new ArrayList<Type>();
       else args = a2;
       yyValue = TSFactory.makeTypeRef(createSpan(yyStart,yyCount), a1, args);
     };

/*
 * TypeName ::=
 *   Identifier
 * | ModuleName "." Identifier
 * ModuleName ::=
 *   Identifier
 * | ModuleName "." Identifier
 */
transient TypeName TypeName =
     a1:Id a2s:(void:dot Id)*
     { yyValue = TSFactory.makeTypeName(createSpan(yyStart,yyCount),
                                        Useful.cons(a1, a2s.list()));
     };

/*
 * TypeArguments ::= "<" w TypeArgumentList w ">"
 */
transient List<Type> TypeArgs =
     openangle w yyValue:TypeArgList w closeangle;
    
/*
 * TypeArgumentList ::=
 *   TypeArgument
 * | TypeArgumentList w "," w TypeArgument
 */
transient List<Type> TypeArgList =
     a1:TypeArg a2s:(w void:comma w TypeArg)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * TypeArgument ::= Type
 */
transient Type TypeArg = Type ;

/*
 * FunctionType ::= (TypeParameters w)? "(" (w ParameterList)? w ")" w "=>" w Type
 */
transient FunctionType FunctionType =
     a1:(TypeParams w)? openparen a2:(w ParamList)? w closeparen w "=>" w a3:Type
     { List<TypeParam> tparams;
       if (a1 == null) tparams = TSFactory.emptyTparams();
       else tparams = a1;
       List<Param> params;
       if (a2 == null) params = TSFactory.emptyParams();
       else params = a2;
       yyValue = TSFactory.makeFunctionType(createSpan(yyStart,yyCount),
                                            tparams, params, a3);
     };

/*
 * TypeQuery ::= typeof w TypeQueryExpression
 */
transient TypeQuery TypeQuery =
     typeof w a1:TypeQueryExpression
     { yyValue = TSFactory.makeTypeQuery(createSpan(yyStart,yyCount), a1); };

/*
 * TypeQueryExpression ::=
 *   Identifier
 * | TypeQueryExpression . IdentifierName
 */
private transient Path TypeQueryExpression =
     a1:Id a2s:(void:dot Id)*
     { yyValue = NodeFactory.makePath(createSpan(yyStart,yyCount),
                                      Useful.list(a1, a2s.list()));
     };

/*
 * ConstructorType ::= "new" w (TypeParameters w)? "(" (w ParameterList)? w ")" w "=>" w Type
 */
transient ConstructorType ConstructorType =
     new w a1:(TypeParams w)? openparen a2:(w ParamList)? w closeparen w "=>" w a3:Type
     { List<TypeParam> tparams;
       if (a1 == null) tparams = TSFactory.emptyTparams();
       else tparams = a1;
       List<Param> params;
       if (a2 == null) params = TSFactory.emptyParams();
       else params = a2;
       yyValue = TSFactory.makeConstructorType(createSpan(yyStart,yyCount),
                                               tparams, params, a3);
     };

/*
 * ObjectType ::= "{" (w TypeBody)? w "}"
 */
transient ObjectType ObjectType =
     opencurly a1:(w TypeBody)? w closecurly
     { List<TypeMember> members;
       if (a1 == null) members = new ArrayList<TypeMember>();
       else members = a1;
       yyValue = TSFactory.makeObjectType(createSpan(yyStart,yyCount), members);
     };

/*
 * TypeBody ::= TypeMemberList (w ";")?
 */
transient List<TypeMember> TypeBody = TypeMemberList (w semicolon)?;

/*
 * TypeMemberList ::=
 *   TypeMember
 * | TypeMemberList w ";" w TypeMember
 *
 * NOTE: The spec requires the semicolon between TypeMembers
 *       but programmers often omit them.
 */
transient List<TypeMember> TypeMemberList =
     a1:TypeMember a2s:((w void:semicolon)? w TypeMember)*
     { yyValue = Useful.cons(a1, a2s.list()); } ;

/*
 * TypeMember ::=
 *   PropertySignature
 * | CallSignature
 * | ConstructSignature
 * | IndexSignature
 * | MethodSignature
 */
transient TypeMember TypeMember =
     CallSig
   / ConstructSig
   / IndexSig
   / MethodSig
   / PropertySig
   ;

/*
 * PropertySignature ::= PropertyName (w "?")? (w TypeAnnotation)?
 */
PropertySig PropertySig =
     a1:PropName a2:(w question)? a3:(w TypeAnnot)?
     { Option<Type> typ;
       if (a3 == null) typ = Option.<Type>none();
       else typ = Option.<Type>some(a3);
       yyValue = TSFactory.makePropertySig(createSpan(yyStart,yyCount),
                                           a1, a2 != null, typ);
     };

/*
 * PropertyName ::=
 *   IdentifierName
 * | StringLiteral
 * | NumericLiteral
 */
/*
 * CallSignature ::= (TypeParameters w)? "(" (w ParameterList)? w ")" (w TypeAnnotation)?
 */
transient CallSig CallSig =
     a1:(TypeParams w)? openparen a2:(w ParamList)? w closeparen a3:(w TypeAnnot)?
     { List<TypeParam> tparams;
       if (a1 == null) tparams = TSFactory.emptyTparams();
       else tparams = a1;
       List<Param> params;
       if (a2 == null) params = TSFactory.emptyParams();
       else params = a2;
       Option<Type> ty;
       if (a3 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a3);
       yyValue = TSFactory.makeCallSig(createSpan(yyStart,yyCount),
                                       tparams, params, ty);
     };

/*
 * ParameterList ::=
 *   RequiredParameterList
 * | OptionalParameterList
 * | RestParameter
 * | RequiredParameterList w "," w OptionalParameterList
 * | RequiredParameterList w "," w RestParameter
 * | OptionalParameterList w "," w RestParameter
 * | RequiredParameterList w "," w OptionalParameterList w "," w RestParameter
 */
/*
 * RequiredParameterList ::=
 *   RequiredParameter
 * | RequiredParameterList w "," w RequiredParameter
 */
/*
 * OptionalParameterList ::=
 *   OptionalParameter
 * | OptionalParameterList w "," w OptionalParameter
 */
transient Param Param = RestParam / OptParam / ReqParam ;
transient List<Param> ParamList =
     a1:Param a2s:(w void:comma w Param)+
     { yyValue = Useful.cons(a1, a2s.list());
       TSUtil.checkParams(writer, yyValue);
     }
   / a1:Param
     { yyValue = Useful.list(a1);
       TSUtil.checkParams(writer, yyValue);
     };
/*
 * RequiredParameter ::=
 *   (PublicOrPrivate w)? Identifier (w TypeAnnotation)?
 * | Identifier w ":" w StringLiteral
 */
transient Param ReqParam =
     a1:Id w colon w a2:StringLiteral
     { Span span = createSpan(yyStart, yyCount);
       yyValue = TSFactory.makeReqParam(span, Option.<Modifier>none(), a1,
                                        Option.<Type>some(TSFactory.makeExprType(span, a2.getEscaped())));
     }
   / a1:(PublicOrPrivate w)? a2:Id a3:(w TypeAnnot)?
     { Option<Modifier> mod;
       if (a1 == null) mod = Option.<Modifier>none();
       else mod = Option.<Modifier>some(a1);
       Option<Type> ty;
       if (a3 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a3);
       yyValue = TSFactory.makeReqParam(createSpan(yyStart, yyCount), mod, a2, ty);
     };

/*
 * PublicOrPrivate ::=
 *   "public"
 * | "private"
 */
transient Modifier PublicOrPrivate =
     public  { yyValue = TSFactory.makePublic(); }
   / private { yyValue = TSFactory.makePrivate(); };

/*
 * OptionalParameter ::=
 *   (PublicOrPrivate w)? Identifier w "?" (w TypeAnnotation)?
 * | (PublicOrPrivate w)? Identifier (w TypeAnnotation)? w Initialiser
 *
 * NOTE: The spec does not allow the StringLiteral type for an optional parameter
 *       but programmers often use it.
 */
transient Param OptParam =
     a1:Id w question w colon w a2:StringLiteral
     { Span span = createSpan(yyStart, yyCount);
       yyValue = TSFactory.makeOptParam(span, Option.<Modifier>none(), a1,
                                        Option.<Type>some(TSFactory.makeExprType(span, a2.getEscaped())),
                                        Option.<Expr>none());
     }
   / a1:(PublicOrPrivate w)? a2:Id w question a3:(w TypeAnnot)?
     { Option<Modifier> mod;
       if (a1 == null) mod = Option.<Modifier>none();
       else mod = Option.<Modifier>some(a1);
       Option<Type> ty;
       if (a3 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a3);
       yyValue = TSFactory.makeOptParam(createSpan(yyStart, yyCount), mod, a2, ty,
                                        Option.<Expr>none());
     }
   / a1:(PublicOrPrivate w)? a2:Id a3:(w TypeAnnot)? w equals w a4:Assignment
     { Option<Modifier> mod;
       if (a1 == null) mod = Option.<Modifier>none();
       else mod = Option.<Modifier>some(a1);
       Option<Type> ty;
       if (a3 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a3);
       yyValue = TSFactory.makeOptParam(createSpan(yyStart, yyCount), mod, a2, ty,
                                        Option.<Expr>some(a4));
     };

/*
 * RestParameter ::= "..." w Identifier (w TypeAnnotation)?
 */
transient Param RestParam =
     "..." w a1:Id a2:(w TypeAnnot)?
     { Option<Type> ty;
       if (a2 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a2);
       yyValue = TSFactory.makeRestParam(createSpan(yyStart, yyCount), a1, ty);
     };

/*
 * ConstructSignature ::= "new" w (TypeParameters w)? "(" (w ParameterList)? w ")" (w TypeAnnotation)?
 */
transient ConstructSig ConstructSig =
     new w a1:(TypeParams w)? openparen a2:(w ParamList)? w closeparen a3:(w TypeAnnot)?
     { List<TypeParam> tparams;
       if (a1 == null) tparams = TSFactory.emptyTparams();
       else tparams = a1;
       List<Param> params;
       if (a2 == null) params = TSFactory.emptyParams();
       else params = a2;
       Option<Type> ty;
       if (a3 == null) ty = Option.<Type>none();
       else ty = Option.<Type>some(a3);
       yyValue = TSFactory.makeConstructSig(createSpan(yyStart,yyCount),
                                            tparams, params, ty);
     };

/*
 * IndexSignature ::=
 *   "[" w Identifier w ":" w "string" w "]" w TypeAnnotation
 * | "[" w Identifier w ":" w "number" w "]" w TypeAnnotation
 */
transient IndexSig IndexSig =
     opensquare w a1:Id w colon w string w closesquare w a2:TypeAnnot
     { yyValue = TSFactory.makeIndexSigStr(createSpan(yyStart,yyCount), a1, a2); }
   / opensquare w a1:Id w colon w number w closesquare w a2:TypeAnnot
     { yyValue = TSFactory.makeIndexSigNum(createSpan(yyStart,yyCount), a1, a2); };

/*
 * MethodSignature ::= PropertyName (w "?")? w CallSignature
 */
transient MethodSig MethodSig =
     a1:PropName a2:(w question)? w a3:CallSig
     { yyValue = TSFactory.makeMethodSig(createSpan(yyStart,yyCount),
                                         a1, a2 != null, a3);
     };

/*
 * TypeAnnotation ::= ":" w Type
 */
transient Type TypeAnnot = colon w yyValue:Type;
