/*******************************************************************************
    Copyright (c) 2013, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A complete Json grammar.
 */
module kr.ac.kaist.jsaf.parser.Json;

header {
import kr.ac.kaist.jsaf.nodes.*;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.Useful;
import edu.rice.cs.plt.tuple.Option;
import edu.rice.cs.plt.iter.IterUtil;
import edu.rice.cs.plt.collect.CollectUtil;
import xtc.util.Action;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import static kr.ac.kaist.jsaf.exceptions.JSAFError.error;
}

body {
}

option parser(kr.ac.kaist.jsaf.parser.Json);

/*
 * http://www.scala-lang.org/api/current/index.html#scala.util.parsing.json.JSON$
 */

public JSONValue JSONApp =
     initParser yyValue:JSONObject w EndOfFile;

/*
 * JSONText ::= JSONValue
 */
public JSONValue JSONText =
     initParser EndOfFile
     { yyValue = JSONValue.nullV(); }
   / initParser yyValue:JSONValue w EndOfFile;

void initParser = w ;

/*
 * JSONValue ::= JSONNullLiteral
 *             | JSONBooleanLiteral
 *             | JSONObject
 *             | JSONArray
 *             | JSONString
 *             | JSONNumber
 */
private JSONValue JSONValue =
     "null"  { yyValue = JSONValue.nullV(); }
   / "true"  { yyValue = JSONValue.trueV(); }
   / "false" { yyValue = JSONValue.falseV(); }
   / JSONObject
   / JSONArray
   / a1:JSONString { yyValue = JSONValue.strF(a1); }
   / a1:JSONNumber { yyValue = JSONValue.numF(a1); }
   ;

/*
 * JSONObject ::= { w } | { w JSONMemberList w }
 */
private JSONValue JSONObject =
     "{" w "}"
     { yyValue = JSONValue.objF(new ArrayList<kr.ac.kaist.jsaf.useful.Pair<String, JSONValue>>()); }
   / "{" w a1:JSONMemberList w "}"
     { yyValue = JSONValue.objF(a1); }
   ;

/*
 * JSONMemberList ::= JSONMember
 *                  | JSONMemberList w , w JSONMember
 */
private List<kr.ac.kaist.jsaf.useful.Pair<String, JSONValue>> JSONMemberList =
     a1:JSONMember a2s:(w void:"," w JSONMember)* w ","? w // extra tolerance for ill syntax
     { yyValue = new ArrayList<kr.ac.kaist.jsaf.useful.Pair<String, JSONValue>>();
       yyValue.add(a1);
       for (kr.ac.kaist.jsaf.useful.Pair<String, JSONValue> pair : a2s.list())
         yyValue.add(pair);
     };

/*
 * JSONMember ::= JSONString w : w JSONValue
 */
private kr.ac.kaist.jsaf.useful.Pair<String, JSONValue> JSONMember =
     a1:JSONString w void:":" w a2:JSONValue
     { yyValue = new kr.ac.kaist.jsaf.useful.Pair<String, JSONValue>(a1, a2); };

/*
 * JSONArray ::= [ w ] | [ w JSONElementList w ]
 */
private JSONValue JSONArray =
     "[" w "]"
     { yyValue = JSONValue.arrF(new ArrayList<JSONValue>()); }
   / "[" w a1:JSONElementList w "]"
     { yyValue = JSONValue.arrF(a1); }
   ;

/*
 * JSONElementList ::= JSONValue
 *                   | JSONElementList w , w JSONValue
 */
private List<JSONValue> JSONElementList =
     a1:JSONValue a2s:(w void:"," w JSONValue)* w ","? w // extra tolerance for ill syntax
     { yyValue = new ArrayList<JSONValue>();
       yyValue.add(a1);
       yyValue.addAll(a2s.list());
     };

/*
 * JSONString ::= " JSONStringCharacters? "
 */
private String JSONString =
     ["] a1s:JSONStringCharacter* ["]
     { yyValue = "";
       for (String c : (List<String>)a1s.list()) yyValue = yyValue.concat(c);
     };

/*
 * JSONStringCharacters ::= JSONStringCharacter JSONStringCharacters?
 * JSONStringCharacter ::= SourceCharacter but not one of " or \ or U+0000 through U+001F
 *                       | \ JSONEscapeSequence
 */
private transient String JSONStringCharacter =
     a1:'\\' a2:JSONEscapeSequence { yyValue = a2; }
   / a1:(!NonJSONStringChar _) { yyValue = String.valueOf(a1); }
   ;

/*
 * JSONEscapeSequence ::= JSONEscapeCharacter | UnicodeEscapeSequence
 */
private transient String JSONEscapeSequence =
     JSONEscapeCharacter
   / UnicodeEscapeSequence
   ;

/*
 * JSONEscapeCharacter ::= one of " / \ b f n r t
 */
private transient String JSONEscapeCharacter =
     a1:["/\\bfnrt] //"
     { switch (a1) {
           case '"': { yyValue = "\\\""; break; }
           case '/': { yyValue = "/"; break; }
           case '\\': { yyValue = "\\\\"; break; }
           case 'b': { yyValue = "\\b"; break; }
           case 'f': { yyValue = "\\f"; break; }
           case 'n': { yyValue = "\\n"; break; }
           case 'r': { yyValue = "\\r"; break; }
           case 't': { yyValue = "\\t"; break; }
           default : { yyValue = ""; break; }
       }
     }
   ;

private transient String UnicodeEscapeSequence =
     a1:[u] a2:HexDigit a3:HexDigit a4:HexDigit a5:HexDigit
     { yyValue = "\\"+a1+a2+a3+a4+a5; };

private transient String HexDigit = [0-9a-fA-F] ;

private transient String NonJSONStringChar =
     a1:["\\\u0000-\u001f] { yyValue = a1+""; }; //"

/*
 * JSONNumber ::= -? w DecimalIntegerLiteral JSONFraction? ExponentPart?
 */
private String JSONNumber =
     a1:"-"? w a2:DecimalIntegerLiteral a3:JSONFraction? a4:ExponentPart?
     { if (a1 != null) yyValue = "-"+a2; else yyValue = a2;
       if (a3 != null) yyValue += a3;
       if (a4 != null) yyValue += a4;
     };

private transient String DecimalIntegerLiteral =
     "0"
   / a1:[1-9] a2:DecimalDigits?
     { yyValue = a1+"";
       if (a2 != null) yyValue += a2;
     };

/*
 * JSONFraction ::= . DecimalDigits
 */
private transient String JSONFraction =
     "." a1:DecimalDigits
     { yyValue = "."+a1; };

private transient String DecimalDigits = [0-9]+ ;

private transient String ExponentPart =
     ([eE]) a1:('+' / '-')? a2:DecimalDigits
     { if (a1 == null) yyValue = "e"+a2;
       else            yyValue = "e"+a1+a2;
     };

transient void EndOfFile  = "\u001a"? w !_ ;
transient void w = Space*; // whitespace optional

/*
 * JSONWhiteSpace ::= <TAB> | <CR> | <LF> | <SP>
 */
transient private void Space =
     void:"\t"
   / [\u000D]
   / [\u000A]
   / void:" " ;
